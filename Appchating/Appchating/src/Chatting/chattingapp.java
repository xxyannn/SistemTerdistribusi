/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Chatting;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;



/**
 *
 * @author xxyan
 */
public class chattingapp extends javax.swing.JFrame implements Runnable{

    Socket client;
    ServerSocket server;
    BufferedReader server_reader,client_reader;
    BufferedWriter server_write,client_write;
    
    public chattingapp() {
        initComponents();
        ListModel<String> listModel = new DefaultListModel<>(); 
        listmessage.setModel(listModel);  
    }
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cboconnection = new javax.swing.JComboBox<>();
        btnconnect = new javax.swing.JButton();
        txtuser = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listmessage = new javax.swing.JList<>();
        txtmesaage = new javax.swing.JTextField();
        btnsend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(50, 251, 86));

        cboconnection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "server", "client" }));
        cboconnection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboconnectionItemStateChanged(evt);
            }
        });

        btnconnect.setText("ON");
        btnconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconnectActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listmessage);

        btnsend.setText("SEND");
        btnsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboconnection, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtmesaage, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnsend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboconnection, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtuser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtmesaage)
                    .addComponent(btnsend, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconnectActionPerformed
        if (cboconnection.getSelectedItem().equals("client")) {
        if (btnconnect.getText().equals("hubungkan")) {
            btnconnect.setText("putuskan");
            client_connection();
            Thread thread = new Thread(this);
            thread.start();
        } else {
            btnconnect.setText("hubungkan");
            disconnected_by_client();
        }
    } else if (cboconnection.getSelectedItem().equals("server")) {
        if (btnconnect.getText().equals("ON")) {
            btnconnect.setText("Off");
            read_connection();
            Thread thread = new Thread(this);
            thread.start();
        } else {
            btnconnect.setText("ON");
            stopped_by_server();
        }
    }
    }//GEN-LAST:event_btnconnectActionPerformed

    private void btnsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsendActionPerformed
    try {
        if (server_write != null) { // Periksa apakah server_write telah diinisialisasi
            server_write.write(txtuser.getText() + ": " + txtmesaage.getText());
            server_write.newLine();
            server_write.flush();
            ((DefaultListModel<String>) listmessage.getModel()).addElement("Me: " + txtmesaage.getText());
            txtmesaage.setText("");
        } else {
            // Handle kesalahan, misalnya tampilkan pesan kesalahan kepada pengguna
            JOptionPane.showMessageDialog(this, "Gagal mengirim pesan. Pastikan Anda sudah terhubung ke server.");
        }
    } catch (IOException e) {
        Logger.getLogger(chattingapp.class.getName()).log(Level.SEVERE, null, e);
    }
 
    }//GEN-LAST:event_btnsendActionPerformed

    private void cboconnectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboconnectionItemStateChanged
       if (cboconnection.getSelectedItem().equals("server")){
           btnconnect.setText("ON");
           txtuser.setText("server");
       } else {
           btnconnect.setText("hubungkan");
           txtuser.setText("client");
       }
    }//GEN-LAST:event_cboconnectionItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chattingapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chattingapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chattingapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chattingapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chattingapp().setVisible(true);
            }
        });
    }
    
     private void client_connection() {
         try {
            String IP_address = JOptionPane.showInputDialog("Masukkan alamat Ip :");
            client = new Socket (IP_address,2000);
             client.setSoTimeout(5000);
            cboconnection.setEnabled(false);
            server_reader = new BufferedReader (new InputStreamReader (client.getInputStream()));
            server_write = new BufferedWriter (new OutputStreamWriter (client.getOutputStream()));
            btnconnect.setText("Putuskan");
        } catch (UnknownHostException e) {
            System.err.println("Akses ke Server gagal");
            System.exit(-1);
            
        } catch (IOException e){
            Logger.getLogger(chattingapp.class.getName ()).log(Level.SEVERE,null,e);
        }
    }

    private void read_connection() {
        try {
            try {
                try {
                    server = new ServerSocket(2000);
                    this.setTitle("mohon tunggu sebentar...");
                } catch (Exception e) {
                    System.err.println("Gagal Membuat Server");
                    System.exit(-1);
                }
                client = server.accept();
                this.setTitle("terhubung ke "+client.getInetAddress());
            } catch (Exception e) {
                System.err.println("Akses Ke server Ditolak...");
                System.exit(-1);
            }
            server_reader = new BufferedReader(new InputStreamReader(client.getInputStream()));
            server_write = new BufferedWriter (new OutputStreamWriter(client.getOutputStream()));
        } catch (Exception e) {
            System.err.println("Tidak Dapat membaca pesan");
            System.exit(-1);
        }
    }
    
    private void disconnected_by_client(){
        try{
            client.close();
            server_reader.close();
            server_write.close();
            cboconnection.setEnabled(true);
            btnconnect.setText("hubungkan");
        } catch (IOException e){
            Logger.getLogger(chattingapp.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }
    
    private void stopped_by_server(){
        try{
            server_reader.close();
            server_write.close();
            btnconnect.setText("ON");
            this.setTitle("terputus");
        } catch (IOException e){
            Logger.getLogger(chattingapp.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnconnect;
    private javax.swing.JButton btnsend;
    private javax.swing.JComboBox<String> cboconnection;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listmessage;
    private javax.swing.JTextField txtmesaage;
    private javax.swing.JTextField txtuser;
    // End of variables declaration//GEN-END:variables

    
    
    
    
    @Override
    public void run() {
         while (true) {
        try {
            String message = server_reader.readLine();
            if (message != null) {
                ((DefaultListModel<String>) listmessage.getModel()).addElement(message);
            }
        } catch (IOException e) {
            Logger.getLogger(chattingapp.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
   
    
}
}
